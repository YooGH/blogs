- 1. JavaScript 简介
- 2. ECMAScript 和 TypeScript 概述
- 3. 数组（45|62）
- 4. 栈（67|84）
- 5. 队列和双端队列（82|99）
- 6. 链表(94|111)
- 7. 集合(118|135)
169-177
字典和散列表(134|151)、递归(162|178)、树
二叉堆和堆排序、图、排序和搜索算法、算法设计与技巧、算法复杂度



4章
栈：./data-structure-js/stack.js

5章
队列：./data-structure-js/queue.js


6章
链表：./data-structure-js/linkedList.js

7章
集合：./data-structure-js/set.js({a: 1})

8章
字典：./data-structure-js/dictionary.js ({a: {a: 1}})
散列表：./data-structure-js/hashTable.js




2.JavaScript数据结构与算法第3版
[ES浏览器兼容](http://kangax.github.io/compat-table/es5/)
[babel](https://babeljs.io/repl)










4章：
①、栈是一种遵从后进先出（LIFO）原则的有序集合。栈顶-新元素，栈底-旧元素（应用：浏览器历史记录,子弹壳装弹，叠书）- 96（4.5）
仅仅用于线性表

②、类的私有属性用1. 下划线标识(实际还是能访问) -> 2. yong Symbol(实际getOwnProperty-Symbols可以访问) -> 3.WeakMap真正实现私有属性，但可读性差并且私有属性不能被继承 -> 4. 提案在属性前加#(如ts,c属性前加private)

③、new Stack()-(73|90)

1. 添加：push
2. 移除：pop
3. 查看队列头元素: peek() (当前第一个元素)
4. 队列是否为空: isEmpty() (是否是空)
5. 长度: size() （length）
6. 清空: clear() （一直调dequeue直到undefined或初始化）
7. 转字符串: toString()

代码： ./data-structure-js/stack.js


④、属性私有：属性前下划线 -> Symbol -> WeakMap -> [属性前#提案](https://github.com/tc39/proposalclass-fields)


const items = new WeakMap();
class Stack {
  constructor () {
    items.set(this, []);
  }
  push(element){
    const s = items.get(this);
    s.push(element);
  }
  pop(){
    const s = items.get(this);
    const r = s.pop();
    return r;
  }
} 










5章：
队列是遵循先进先出（FIFO，也称为先来先服务）原则的一组有序的项(应用：排队做核酸)
双端口队列（应用：回文），循环队列（应用：击鼓传花游戏）


1. 添加：enqueue（push）
2. 移除：dequeue（shift）
3. 查看队列头元素: peek() (当前第一个元素)
4. 队列是否为空: isEmpty() (是否是空)
5. 长度: size() （length）
6. 清空: clear() （一直调dequeue直到undefined或初始化）

队列：./data-structure-js/queue.js







5.2.1双端队列数组结构（与双端队列，就是多少后进和后出操作）

队列：./data-structure-js/queue.js


5.3.1循环队列
5.3.2回文检测器: 正反读有一样 -> madam  (比较就是前出和后出比较是否一致)










6章
链表


1. 添加元素 push
2. index移除元素 removeAt
3. 循环迭代链表直到目标位置 getElementAt(下标找元素)
4. 任意位置插入元素
5. 返回一个元素的位置(indexOf) 9.27
6. 从链表中移除元素(remove) 9.27
7. isEmpty、size 和 getHead 方法 9.27
8. toString()

代码：./data-structure-js/linkedList.js


6.2双向链表(多了个前节点)
> 比单链表多了前指针，和对应重写的插入和移除方法


代码：./data-structure-js/linkedList.js



6.3 循环链表就是将单链或双链最后元素下一个元素的指针（tail.next）指向第一个元素



6.4 有序链表










7章
集合: 不允许值重复的顺序数据结构

一、创建集合类
- add(element)：向集合添加一个新元素。 
- delete(element)：从集合移除一个元素。 
- has(element)：如果元素在集合中，返回 true，否则返回 false。 
- clear()：移除集合中的所有元素。 
- size()：返回集合所包含元素的数量。它与数组的 length 属性类似。 
- values()：返回一个包含集合中所有值（元素）的数组。

代码： ./data-structure-js/set.js


二、 扩展运算
- 并集：对于给定的两个集合，返回一个包含两个集合中所有元素的新集合。
- 交集：对于给定的两个集合，返回一个包含两个集合中共有元素的新集合。
- 差集：对于给定的两个集合，返回一个包含所有存在于第一个集合且不存在于第二个集
合的元素的新集合。
- 子集：验证一个给定集合是否是另一集合的子集。

代码： ./data-structure-js/set.js


三、ES2015-Set类
原来的 Set 不同: values 方法返回 Iterator、size方法ES6是size属性、没有扩展运算(并集等)

用新特性扩展运算符(将集合转化为数组；执行需要的运算；将结果转化回集合)改写扩展运算,主要作用就是将集合转成数组方便运算，例如：
union(setA, setB) { new Set([...setA, ...setB]) } // 并集
difference(setA, setB)new Set([...setA].filter(x => !setB.has(x))) // 差集


四、[多重集或袋](https://github.com/loiane/javascript-datastructures-algorithms):集合可以添加重复的值










8章
一、字典也称作映射、符号表或关联数组（ES2015对应的类Map）

与Set比较
Set: {a: 1}
Map: {a: {a: 1}}

import { defaultToString } from '../util'; // 键需要是字符串，所有对其他类型进行字符串转换

```
export function defaultToString(item) {
  if (item === null) {
    return 'NULL';
  } else if (item === undefined) {
    return 'UNDEFINED';
  } else if (typeof item === 'string' || item instanceof String) {
    return `${item}`;
  }
  return item.toString();
} 
```

```
class ValuePair {
  constructor(key, value) {
    this.key = key;
    this.value = value;
  }
  toString() {
    return `[#${this.key}: ${this.value}]`;
  }
} 
```

 - set(key,value)：向字典中添加新元素。如果 key 已经存在，那么已存在的 value 会被新的值覆盖。
 - remove(key)：通过使用键值作为参数来从字典中移除键值对应的数据值。
 - hasKey(key)：如果某个键值存在于该字典中，返回 true，否则返回 false。
 - get(key)：通过以键值作为参数查找特定的数值并返回。
 - clear()：删除该字典中的所有值。
 - size()：返回字典所包含值的数量。与数组的 length 属性类似。
 - isEmpty()：在 size 等于零的时候返回 true，否则返回 false。
 - keys()：将字典所包含的所有键名以数组形式返回。
 - values()：将字典所包含的所有数值以数组形式返回。
 - keyValues()：将字典中所有[键，值]对返回。
 - forEach(callbackFn)：迭代字典中所有的键值对。callbackFn 有两个参数：key 和value。该方法可以在回调函数返回 false 时被中止（和 Array 类中的 every 方法相似）。

代码： ./data-structure-js/dictionary.js





8.2 散列表（142|159）
HashTable类，也叫HashMap类，是Dictionary 类的一种散列表实现方式

字典的一种实现，常用于数据库索引，JS的对象

 - put(key,value)：向散列表增加一个新的项（也能更新散列表）。
 - remove(key)：根据键值从散列表中移除值。
 - get(key)：返回根据键值检索到的特定的值。

代码：[hashTable](./data-structure-js/hashTable.js)


问题key用hash表示``hash % 37``余数有可能冲突解决方法：
1. 分离链接（值相同的建立线性表，但也占空间）、
2. 线性探查（值相同的,后来者+1直到有空闲位置）、
3. 和双散列法(不研究)



ES2015新增了WeakMap类和WeakSet类，弱化的Map和Set，为了性能没有迭代器，key只能是对象，不能是数字，字符串，布尔值等其他基本数据类型










宿主发起的任务为宏观任务(setTimeout)，js引擎发起的任务为微观任务(ES5之后的Promise),引擎等待宿主环境分配任务发起，node也叫事件循环




路由: config/permission.js => 做了路由守卫router.beforeEach








CICD(1week)
ESLint   怎么更改、vscode插件(1week)
用vim打包项目（看看原来的打包项目时间）(1week)
trao--E: ai_trao(手动转)/ai_mdt_xcx-taro(自转)（file:///D:/a/blogs/view/other/taro.md）
diff: https://mp.weixin.qq.com/s/esHgaLjr6plHxaidFw9iVw（到：此方法就是diff算法的核心部分）

1. vue源码
2. 设计模型
3. ES6
4. done空间算法时间算法
5. docker18开始,共30

9月(看看skill、过过一)
一、对象、数组、字符串、敲敲排序代码2
skill(docker/算法)、js
设计模式(结构1-2)
搭建小vue



Object(object; 14: vue)


队列：先进先出（排队）


